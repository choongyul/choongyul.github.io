<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on 나의 경험을 기록하는 공간</title>
    <link>https://choongyul.github.io/categories/programming/</link>
    <description>Recent content in Programming on 나의 경험을 기록하는 공간</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 13 Oct 2020 05:47:59 +0900</lastBuildDate>
    
	<atom:link href="https://choongyul.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>프로그래밍 언어론 - Day5</title>
      <link>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day5/</link>
      <pubDate>Tue, 13 Oct 2020 05:47:59 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day5/</guid>
      <description>프로그래밍 언어론을 배워야 하는 이유 새로운 언어를 쉽게 배울 수 있다. 새로운 프로그래밍 언어를 학습하는 능력을 향상시키는 간단한 방법은 여러개의 언어를 배우는 것이다. 여러 언어를 배우면 새로운 언어에 익숙해 지는 시간은 서서히 줄어 들것이다. 그리고 언어의 차이란 단지 Syntax의 차이라고 생각할 것이다. 절차적 프로그래밍에 익숙한 C개발자가 FORTRAN, BASIC을 쉽게 학습하는 것에 빚대어 말이다.
정말 언어를 배우는 건 문법의 차이에 익숙해 지는 일일까? 우리는 같은 범주에 있는 언어를 배우며 스스로를 너무 높게 평가하는 것이 아닌지 생각해 보아야 한다.</description>
    </item>
    
    <item>
      <title>프로그래밍 언어론 - Day4</title>
      <link>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day4/</link>
      <pubDate>Thu, 08 Oct 2020 05:48:14 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day4/</guid>
      <description>프로그래밍 언어의 발전 수학자들의 연구가 프로그래밍 언어의 시초가 되었다는 말은 우리가 알고 있는 어셈플러, C, JAVA 같은 언어의 형식에 영향을 미쳤다는 말이 아니다. 그들은 컴퓨터를 이용하여 어떻게 문제를 풀수 있을지 고민했다. 수학자들의 고뇌는 원시적 재귀 함수, 람다 계산식, While-Programming 과 같은 개념을 만들었다. 프로그래밍 언어의 구문보다는 알고리즘에 영향을 미쳤다고 하는 편이 맞다.
기계어(Machine Language) 1945년, 존 폰노이만과 동료들이 컴퓨터 아키텍처 구조를 확립하고 부터 컴퓨터에는 2진법 체계가 도입 되었다. 컴퓨터는 전자 장치였고 전자신호는 &amp;lsquo;신호가 들어왔다(1)&amp;rsquo; &amp;lsquo;신호과 들어오지 않았다(0)&amp;rsquo; 단 두 가지 뿐이 었기때문에 어쩔 수 없는 선택이었다.</description>
    </item>
    
    <item>
      <title>프로그래밍 언어론 - Day3</title>
      <link>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day3/</link>
      <pubDate>Tue, 06 Oct 2020 05:31:23 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/10/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day3/</guid>
      <description>프로그래밍 언어의 탄생 고대부터 수학자들은 반복 연산을 자동화하고 싶었다. 하지만 주판 이외에는 사칙연산에 도움을 줄만한 도구는 없었다. 오랜 염원에 비해 꽤나 늦게 기술은 발전했다. 17세기가 되어서야 기계식 수동 계산기가 발명되었고 19세기가 되어서야 찰스 배비지에 의해 자동계산기에 대한 개념이 수립하였다. 찰스 배비지가 제안한 계산기는 4가지 주요 장치로 구성되어 있다.
 수를 저장하는 장치 저장된 수치 간의 계산을 하는 장치 기계의 동작을 제어하는 장치 입출력 장치  이는 현대의 컴퓨터의 주요 요소를 모두 갖춘 것이었다.</description>
    </item>
    
    <item>
      <title>프로그래밍 언어론 - Day2</title>
      <link>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day2/</link>
      <pubDate>Mon, 28 Sep 2020 06:27:11 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day2/</guid>
      <description>소프트웨어  사람이 만들고 컴퓨터가 실행한다.  컴퓨터 언어 계층  컴퓨터 언어는 계층 구조를 가지고 있다. 컴파일러라는 소프트웨어가 상위언어에서 하위언어로 변경하여 컴퓨터가 프로그램을 실행할 수 있게 해준다.  컴파일 주요원칙 Compositional 하다  작은 단위로 구문을 해석한 다음 합치는 방법을 채택한다. 글을 쓰는 것과 같이, 문장을 번역해서 문단을 만들고 문단을 을 모아 챕터를 만들고 결국 책을 만드는 것과 같다.  Invariant 하다.  A는 항상 A이다. 정황에 따라 뜻이 변경되지 않는다는 뜻이다.</description>
    </item>
    
    <item>
      <title>프로그래밍 언어론 - Day1</title>
      <link>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day1/</link>
      <pubDate>Wed, 23 Sep 2020 06:53:55 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EB%A1%A0-day1/</guid>
      <description>프로그래밍 언어란?  자동 실행을 염두에 두고 만들어진 언어다. 프로그래밍 언어 자체는 논리학과 수학 아래서 발전할 수 있다.  예제&amp;gt; 1. 컴퓨터라는 기계에 명령하는 도구이다. 2. 프로그래머들 사이의 소통 수단이다. 3. 상위 레벨 디자인을 표현하는 도구이다. 4. 알고리즘을 기술하는 표기법이다. 프로그래밍 언어론을 왜 배우는가?  프로그래밍 언어를 더 잘이해하기 위해 프로그래밍 언어를 선택할 수 있는 능력을 증대 새로운 프로그래밍 언어를 배우기 쉽게 새로운 프로그래밍언어를 설계하기 쉽게 현재 사용하고 있는 언어를 쉽게 이해하게  소프트웨어는 미개하다.</description>
    </item>
    
    <item>
      <title>프로그래밍이란?</title>
      <link>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Tue, 22 Sep 2020 06:00:15 +0900</pubDate>
      
      <guid>https://choongyul.github.io/2020/09/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80/</guid>
      <description>컴퓨터  컴퓨터는 프로그램 언어로 기술된 수학적 계산, 논리적 연산을 수행하는 기계이다.  프로그래밍이란?  특정한 결과를 얻기 위해 프로그램을 기획하고 만드는 일이다. 문제를 분석하고, 알고리즘을 만들고 검증하고 구현하는 일과 관련되어 있다.  개발자와 사용자  둘은 관심 분야가 다르다.  개발자 관심  사용자가 어떤 기능을 원하는지? 사용자는 어떤 순서로 주어진 기능을 수행하는지? 프로그램 성능의 기준값은 무엇인지? 실행환경에 특이점은 없는지?  사용자 관심  나의 Pain Point를 개발된 기능이 해결해 줄수 있는지?</description>
    </item>
    
  </channel>
</rss>